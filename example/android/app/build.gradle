def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    namespace "com.YOZHStudio.RailRoad"
    defaultConfig {
        applicationId "com.YOZHStudio.RailRoad"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 21
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation("com.cleveradssolutions:cas-sdk:3.8.1")
    implementation("com.cleveradssolutions:ironsource:8.1.0.0")   // IronSource
    implementation("com.cleveradssolutions:google:23.0.0.0")      // Google Ads | Admob
    implementation("com.cleveradssolutions:unity:4.12.0.0")       // Unity Ads
    implementation("com.cleveradssolutions:kidoz:9.1.2.0")        // Kidoz
    implementation("com.cleveradssolutions:superawesome:9.3.2.0") // SuperAwesome
    implementation("com.cleveradssolutions:vungle:7.3.2.1")       // LiftoffMonetize
    implementation("com.cleveradssolutions:inmobi:10.7.4.0")      // InMobi
    implementation("com.cleveradssolutions:chartboost:9.7.0.0")   // Chartboost
    implementation("com.cleveradssolutions:fyber:8.2.7.1")        // DT Exchange
    implementation("com.cleveradssolutions:mintegral:16.7.71.0")  // Mintegral
    implementation("com.cleveradssolutions:applovin:12.5.0.0")    // AppLovin
    implementation("com.cleveradssolutions:facebook:6.17.0.1")    // Meta Audience Network
    implementation("com.cleveradssolutions:pangle:5.9.0.6")       // Pangle
    implementation("com.cleveradssolutions:yandex:27.1.0.0")      // Yandex Ads
    implementation("com.cleveradssolutions:bigo:4.8.1.0")         // Bigo

    implementation("com.cleveradssolutions:cas-exchange:3.8.0")   // CASExchange
    implementation("com.cleveradssolutions:ogury:5.8.0.0")        // Ogury
    implementation("com.cleveradssolutions:loopme:9.0.4.0")       // LoopMe
    implementation("com.cleveradssolutions:startio:5.0.1.0")      // StartIO
    implementation("com.cleveradssolutions:madex:1.4.4.0")        // Madex
    implementation("com.cleveradssolutions:hyprmx:6.4.1.0")       // HyprMX
    implementation("com.cleveradssolutions:smaato:22.0.2.1")      // Smaato
}
